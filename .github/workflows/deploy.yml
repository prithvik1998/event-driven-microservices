#!/bin/bash
# Food Ordering System Setup Script

# Step 1: Clean up previous installations
echo "Cleaning up previous installations..."
helm uninstall my-release 2>/dev/null || true
helm uninstall schema 2>/dev/null || true
kubectl delete pvc --all 2>/dev/null || true

# Step 2: Install Kafka with proper settings
echo "Installing Kafka..."
helm repo add bitnami https://charts.bitnami.com/bitnami
helm install my-release bitnami/kafka \
  --set persistence.enabled=false \
  --set zookeeper.persistence.enabled=false \
  --set replicaCount=1 \
  --set zookeeper.enabled=true

# Step 3: Wait for Kafka to be ready
echo "Waiting for Kafka to be ready..."
kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=kafka,app.kubernetes.io/instance=my-release --timeout=300s || true
sleep 30  # Additional wait to ensure Kafka is fully operational

# Step 4: Install Schema Registry with proper connection to Kafka
echo "Installing Schema Registry..."
helm install schema bitnami/schema-registry \
  --set kafka.bootstrapServers=my-release-kafka:9092

# Step 5: Wait for Schema Registry to be ready
echo "Waiting for Schema Registry to be ready..."
kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=schema-registry,app.kubernetes.io/instance=schema --timeout=300s || true
sleep 30  # Additional wait to ensure Schema Registry is fully operational

# Step 6: Create Kafka topics
echo "Creating Kafka topics..."
kubectl apply -f - <<EOF
apiVersion: batch/v1
kind: Job
metadata:
  name: kafka-topics-setup
spec:
  ttlSecondsAfterFinished: 100
  template:
    spec:
      containers:
      - name: kafka-client
        image: bitnami/kafka:latest
        command:
        - "/bin/bash"
        - "-c"
        - |
          sleep 30  # Wait for Kafka to be fully ready
          kafka-topics.sh --bootstrap-server my-release-kafka:9092 --create --if-not-exists --topic payment-request --replication-factor 1 --partitions 3
          kafka-topics.sh --bootstrap-server my-release-kafka:9092 --create --if-not-exists --topic payment-response --replication-factor 1 --partitions 3
          kafka-topics.sh --bootstrap-server my-release-kafka:9092 --create --if-not-exists --topic restaurant-approval-request --replication-factor 1 --partitions 3
          kafka-topics.sh --bootstrap-server my-release-kafka:9092 --create --if-not-exists --topic restaurant-approval-response --replication-factor 1 --partitions 3
          kafka-topics.sh --bootstrap-server my-release-kafka:9092 --create --if-not-exists --topic customer --replication-factor 1 --partitions 3
      restartPolicy: Never
  backoffLimit: 4
EOF

# Step 7: Wait for Kafka topic creation
echo "Waiting for Kafka topics to be created..."
kubectl wait --for=condition=complete job/kafka-topics-setup --timeout=300s || true

# Step 8: Deploy Postgres
echo "Deploying Postgres..."
kubectl apply -f ./infrastructure/k8s/postgres-deployment.yml
kubectl wait --for=condition=ready pod -l app=postgres --timeout=300s || true

# Step 9: Set proper environment variables for microservices
echo "Configuring microservices..."
kubectl apply -f ./infrastructure/k8s/application-deployment-local.yml

# Step 10: Configure services to use Schema Registry correctly
kubectl set env deployment/customer-deployment \
  SPRING_KAFKA_PROPERTIES_VALUE_SERIALIZER=io.confluent.kafka.serializers.KafkaAvroSerializer \
  SPRING_KAFKA_PROPERTIES_SCHEMA_REGISTRY_URL=http://schema-schema-registry:8081

kubectl set env deployment/order-deployment \
  SPRING_KAFKA_PROPERTIES_VALUE_SERIALIZER=io.confluent.kafka.serializers.KafkaAvroSerializer \
  SPRING_KAFKA_PROPERTIES_VALUE_DESERIALIZER=io.confluent.kafka.serializers.KafkaAvroDeserializer \
  SPRING_KAFKA_PROPERTIES_SCHEMA_REGISTRY_URL=http://schema-schema-registry:8081 \
  SPRING_KAFKA_PROPERTIES_SPECIFIC_AVRO_READER=true

kubectl set env deployment/payment-deployment \
  SPRING_KAFKA_PROPERTIES_VALUE_SERIALIZER=io.confluent.kafka.serializers.KafkaAvroSerializer \
  SPRING_KAFKA_PROPERTIES_VALUE_DESERIALIZER=io.confluent.kafka.serializers.KafkaAvroDeserializer \
  SPRING_KAFKA_PROPERTIES_SCHEMA_REGISTRY_URL=http://schema-schema-registry:8081 \
  SPRING_KAFKA_PROPERTIES_SPECIFIC_AVRO_READER=true

kubectl set env deployment/restaurant-deployment \
  SPRING_KAFKA_PROPERTIES_VALUE_SERIALIZER=io.confluent.kafka.serializers.KafkaAvroSerializer \
  SPRING_KAFKA_PROPERTIES_VALUE_DESERIALIZER=io.confluent.kafka.serializers.KafkaAvroDeserializer \
  SPRING_KAFKA_PROPERTIES_SCHEMA_REGISTRY_URL=http://schema-schema-registry:8081 \
  SPRING_KAFKA_PROPERTIES_SPECIFIC_AVRO_READER=true

# Step 11: Restart all deployments to apply changes
echo "Restarting deployments..."
kubectl rollout restart deployment customer-deployment order-deployment payment-deployment restaurant-deployment

# Step 12: Wait for services to be ready
echo "Waiting for services to be ready..."
kubectl wait --for=condition=available deployment/customer-deployment --timeout=300s
kubectl wait --for=condition=available deployment/order-deployment --timeout=300s
kubectl wait --for=condition=available deployment/payment-deployment --timeout=300s
kubectl wait --for=condition=available deployment/restaurant-deployment --timeout=300s

# Step 13: Display service information
echo "Service endpoints:"
kubectl get svc

echo "Setup complete! You can now test your services."
